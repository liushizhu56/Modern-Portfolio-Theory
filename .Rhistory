## Problem 12
my_mat = matrix(c(8, 3, 4, 1, 5, 9, 6, 7, 2), ncol = 3)
magic = function(x) {
row = apply(x, 1, sum)
col= apply(x, 2, sum)
maindia= sum(diag(x))
antidia= sum(diag(t(x)[, ncol(x):1] ))
result_1=c(row, col, maindia, antidia)
result_2= length(unique(result_1)) == 1
return(result_2)
}
magic(my_mat)
## Problem 13
x <- 2
if ( x == 1 ) { cat(x, "is 1")
}  else {
cat(x, "is not 1")
}
## Problem 14
mad = function(x) {
me_1 = median(x)
mad_1 = median(abs(x - me_1))
return(mad_1)
}
mad(c(3,2,4,6,7))
## Problem 16
my_func16 = function(n){
p = 2:n
i = 1
while (p[i] <= sqrt(n)) {
p =  p[p %% p[i] != 0 | p==p[i]]
i = i+1
}
max(p[n %% p == 0ã€€])
}
my_func16(13195)
## above function gives error when the input number is too big
func16 = function(n){
i = 3
while (i <= sqrt(n)){
while (n %% i == 0 & n %/% i > 1 ){
n = n / i
}
i = i + 1
}
n
}
func16(600851475143)
## Problem 17
revdigits = function(n) {
as.numeric(strrev(as.numeric(n)))
}
is.palindrome = function(n) {
n == revdigits(n)
}
n = 0
for(x in 999:800){
for(y in 999:800){
if(is.palindrome(x*y) && (x*y > n))
n = x*y
}
}
for (i in 800:999) {
if (n %% i == 0) {cat(i,'\n')}
}
n
## Problem 18
## Problem 17
revdigits = function(n) {
as.numeric(strrev(as.numeric(n)))
}
is.palindrome = function(n) {
n == revdigits(n)
}
n=0
for(x in 999:800){
for(y in 999:800){
if(is.palindrome(x*y) && (x*y > n))
n = x*y
}
}
n
for (i in 800:999) {
if (n %% i == 0) {cat(i,'\n')}
}
## Problem 17
revdigits = function(n) {
as.numeric(strrev(as.numeric(n)))
}
is.palindrome = function(n) {
n == revdigits(n)
}
for(x in 999:800){
for(y in 999:800){
if(is.palindrome(x*y) && (x*y > n))
n = x*y
}
}
n
revdigits = function(n) {
as.numeric(strrev(as.numeric(n)))
}
is.palindrome = function(n) {
n == revdigits(n)
}
n=0
for(x in 999:800){
for(y in 999:800){
if(is.palindrome(x*y) && (x*y > n))
n = x*y
}
}
n
x1 = c()
for (i in 1:1e4) {
y = findprime(i)
x1[i] = y
}
findprime = function(x) {
if (x %in% c(2, 3, 5, 7)) return(TRUE)
if (x %% 2 == 0 | x == 1) return(FALSE)
xsqrt = round(sqrt(x))
xseq = seq(from = 3, to = xsqrt, by = 2)
if (all(x %% xseq != 0)) return(TRUE)
else return(FALSE)
}
x1 = c()
for (i in 1:1e4) {
y = findprime(i)
x1[i] = y
}
View(findprime)
y
x1
x2 = logical(1e4)
for (i in 1:1e4) {
y = findprime(i)
x2[i] = y
}
x2
sapply(1:1e4, findprime)
hello_func = function(name){
print(paste("Hello," ,name))
print(" ")
#return(paste("Hello," ,name))
}
hello_func("Vivian")
hello_func = function(name) {
return(name)
}
hello_func("Vivian")
hello_func = function(name){
print(paste("Hello," ,name))
print(" ")
return(paste("Hello," ,name))
}
hello_func("Vivian")
hello_func = function(name) {
return(name)
}
hello_func("Vivian")
library(reshape2)
dcast(data=subdata,
formula=Species ~ .,
value.var='Petal.Width',
fun=mean)
subdata = iris[ ,4:5]
dcast(data=subdata,
formula=Species ~ .,
value.var='Petal.Width',
fun=mean)
View(subdata)
dcast(data=subdata,
formula=Species ~ .,
value.var='value')
iris_long = melt(data=iris,
id='Species')
View(iris_long)
?tips
View(iris_long)
dcast(data=iris_long,
formula=Species ~ variable,
value.var = 'value')
dcast(iris_long,
formula=Species ~ variable,
value.var = 'value')
dcast(iris_long,
Species ~ variable,
value.var = 'value')
View(iris_long)
dcast(subdata,
formula=Species ~ .,
value.var='Petal.Width',
fun=mean)
iris_long = melt(data=iris,
id='Species')
dcast(iris_long,
Species ~ variable,
value.var = 'value')
datax = data.frame(id=c(1,2,3), gender=c('M', 'F', 'M'))
datay = data.frame(id=c(3,1,2), name=c('tom','john','mary'))
datax; datay
merge(datax, datay, by='id')
datax = data.frame(id=c(1,2,5), gender=c('M', 'F', 'M'))
datay = data.frame(id=c(3,1,2), name=c('tom','john','mary'))
datax; datay
merge(datax, datay, by='id')
datax = data.frame(id=c(1,2,3,1), gender=c('M', 'F', 'M','M'))
datay = data.frame(id=c(3,1,2), name=c('tom','john','mary'))
datax; datay
merge(datax, datay, by='id')
datax = data.frame(id=c(1,2,3), gender=c('M', 'F', 'M'))
datay = data.frame(id=c(3,1,2,4), name=c('tom','john','mary','kid'))
datax; datay
merge(datax, datay, by='id')
datax = data.frame(id=c(1,2,3), gender=c('M', 'F', 'M'))
datay = data.frame(id=c(3,1,2,3), name=c('tom','john','mary','kid'))
datax; datay
merge(datax, datay, by='id')
x <- data.frame(
name = c("John", "Paul", "George", "Ringo", "Stuart", "Pete"),
instrument = c("guitar", "bass", "guitar", "drums", "bass",
"drums"))
y <- data.frame(
name = c("John", "Paul", "George", "Ringo", "Brian"),
band = c("TRUE", "TRUE", "TRUE", "TRUE", "FALSE"))
left_join(x, y, by = "name")
inner_join(x, y, by = "name")
semi_join(x, y, by = "name")
anti_join(x, y, by = "name")
library(reshape2)
left_join(x, y, by = "name")
inner_join(x, y, by = "name")
semi_join(x, y, by = "name")
anti_join(x, y, by = "name")
?anti_join
??anti_join
??anti_join
library("plyr", lib.loc="~/R/win-library/3.2")
install.packages(dplyr)
install.packages("dplyr")
library("dplyr")
x <- data.frame(
name = c("John", "Paul", "George", "Ringo", "Stuart", "Pete"),
instrument = c("guitar", "bass", "guitar", "drums", "bass",
"drums"))
y <- data.frame(
name = c("John", "Paul", "George", "Ringo", "Brian"),
band = c("TRUE", "TRUE", "TRUE", "TRUE", "FALSE"))
left_join(x, y, by = "name")
inner_join(x, y, by = "name")
semi_join(x, y, by = "name")
anti_join(x, y, by = "name")
x <- data.frame(
name = c("John", "Paul", "George", "Ringo", "Stuart", "Pete"),
instrument = c("guitar", "bass", "guitar", "drums", "bass",
"drums"))
y <- data.frame(
name = c("John", "Paul", "George", "Ringo", "Brian"),
band = c("TRUE", "TRUE", "TRUE", "TRUE", "FALSE"))
left_join(x, y, by = "name")
inner_join(x, y, by = "name")
semi_join(x, y, by = "name")
anti_join(x, y, by = "name")
left_join(x, y, by = "name")
inner_join(x, y, by = "name")
semi_join(x, y, by = "name")
anti_join(x, y, by = "name")
x <- data.frame(
name = c("John", "Paul", "George", "Ringo", "Stuart", "Pete"),
instrument = c("guitar", "bass", "guitar", "drums", "bass",
"drums"))
y <- data.frame(
name = c("John", "Paul", "George", "Ringo", "Brian"),
band = c("TRUE", "TRUE", "TRUE", "TRUE", "FALSE"))
x
y
left_join(x, y, by = "name")
inner_join(x, y, by = "name")
tips_by_sex = split(tips, tips$sex)
head(tips_by_sex[[1]], 2)
head(tips_by_sex[[2]], 2)
ratio_fun = function(x) {
sum(x$tip) / sum(x$total_bill)
}
ratio_fun(tips_by_sex)
ratio_fun(tips)
ratio_fun(tips_by_sex[[1]], ))
ratio_fun(tips_by_sex[[1]])
result = lapply(tips_by_sex, ratio_fun)
head(result, 3)
fruit = 'apple orange grape banana'
strsplit(fruit, split=' ')
fruitvec = unlist(strsplit(fruit, split=' '))
print(fruitvec)
install.packages("XML")
library(XML)
web = 'http://cran.r-project.org/web/packages/available_packages_by_name.html'
packages = readHTMLTable(web, stringsAsFactors = FALSE)
str(packages)
packages[[1]]
pnames = packages[[1]][ ,1]
length(pnames)
table = readHTMLTable(urls[1], stringsAsFactors=FALSE, header=FALSE)
info = table[[1]]
paste0(info$V1, info$V2)
b = 'http://cran.r-project.org/web/packages/'
a = '/index.html'
urls = paste0(b, pnames, a)
table = readHTMLTable(urls[1], stringsAsFactors=FALSE, header=FALSE)
info = table[[1]]
paste0(info$V1, info$V2)
table
info = table[[1]]
info
head(urls)
length(urls)
urls[1]
table
info = table[[1]]
info
tables = lapply(urls[1:10], readHTMLTable, stringsAsFactors=FALSE, header=FALSE
infos = lapply(tables, function(x) x[[1]])
infovec = lapply(infos, function(x) paste0(x$V1, x$V2))
library(XML)
url2 = "http://www.w3schools.com/xml/plant_catalog.xml"
xmlfile = xmlTreeParse(url2) #download and parse XML
#whole xml file
xmltop = xmlRoot(xmlfile) #get root node
xmltop[[2]]
xmltop[[2]][[1]]
xmlValue(xmltop[[2]][[1]]) #get leaf node data
xmltop[['PLANT']][['COMMON']] #default return 1st list
xmlValue(xmltop[['PLANT']][['COMMON']]) #get data from children of 'x
xmlSApply(xmltop[[1]], xmlValue) #get data from each child of XML nodes
plantcat = xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
View(plantcat)
plantcat[4]
plantcat[,1:5]
plantcat_df = data.frame(t(plantcat),row.names=NULL)
View(plantcat_df)
plantcat_df[1:5,1:4]
library(XML)
url = 'http://mirrors.ustc.edu.cn/CRAN/web/packages/available_packages_by_date.tables = readHTMLTable(url,
stringsAsFactors=FALSE,header=TRUE)'
url3 = 'http://mirrors.ustc.edu.cn/CRAN/web/packages/available_packages_by_date.html'
tables3 = readHTMLTable(url, stringsAsFactors=FALSE,header=TRUE)
url3 = 'http://mirrors.ustc.edu.cn/CRAN/web/packages/available_packages_by_date.html'
tables3 = readHTMLTable(url, stringsAsFactors=FALSE,header=TRUE)
url3 = 'http://mirrors.ustc.edu.cn/CRAN/web/packages/available_packages_by_date.html'
tables3 = readHTMLTable(url3, stringsAsFactors=FALSE,header=TRUE)
data3 = tables3[[1]]
View(data3)
data3[2,]
View(data3)
hist(res, main="R Package Name Length", xlab="Length")
res = nchar(data3[,2]) #2nd column
hist(res, main="R Package Name Length", xlab="Length")
url = 'http://www.imdb.com/title/tt0111161/criticreviews?ref_=tt_ov_rt'
raw = getURL(url)
data = htmlParse(raw)
library(RCurl)
library(XML)
url = 'http://www.imdb.com/title/tt0111161/criticreviews?ref_=tt_ov_rt'
raw = getURL(url)
data = htmlParse(raw)
xpath = '//tr[@itemprop="reviews"]/td[2]/div'
nodes = getNodeSet(data, xpath)
text = sapply(nodes, xmlValue)
text
install.packages("rJava")
library(rJava)
library(rJava)
library(tseries)
library(quadprog)
library(PerformanceAnalytics)
library(ggplot2)
library(xlsx)
FXE <- get.hist.quote(instrument="FXE", start="2007-01-01", end="2013-02-28", quote="Close")
EWJ <- get.hist.quote(instrument="EWJ", start="2007-01-01", end="2013-02-28", quote="Close")
GLD <- get.hist.quote(instrument="GLD", start="2007-01-01", end="2013-02-28", quote="Close")
QQQ <- get.hist.quote(instrument="QQQ", start="2007-01-01", end="2013-02-28", quote="Close")
SPY <- get.hist.quote(instrument="SPY", start="2007-01-01", end="2013-02-28", quote="Close")
SHV <- get.hist.quote(instrument="SHV", start="2007-01-01", end="2013-02-28", quote="Close")
DBA <- get.hist.quote(instrument="DBA", start="2007-01-01", end="2013-02-28", quote="Close")
USO <- get.hist.quote(instrument="USO", start="2007-01-01", end="2013-02-28", quote="Close")
XBI <- get.hist.quote(instrument="XBI", start="2007-01-01", end="2013-02-28", quote="Close")
ILF <- get.hist.quote(instrument="ILF", start="2007-01-01", end="2013-02-28", quote="Close")
GAF <- get.hist.quote(instrument="GAF", start="2007-01-01", end="2013-02-28", quote="Close")
EPP <- get.hist.quote(instrument="EPP", start="2007-01-01", end="2013-02-28", quote="Close")
FEZ <- get.hist.quote(instrument="FEZ", start="2007-01-01", end="2013-02-28", quote="Close")
rawPrices <- cbind(FXE,EWJ,GLD,QQQ,SPY,SHV,DBA,USO,XBI,ILF,GAF,EPP,FEZ)
#### calculate daily returns ####
dailyReturns <- diff(rawPrices)/lag(rawPrices, k=-1)
colnames(dailyReturns) <- c("FXE","EWJ","GLD","QQQ","SPY","SHV","DBA","USO","XBI","ILF","GAF","EPP","FEZ")
obs <- nrow(dailyReturns)
dailyReturns <- cbind(dailyReturns, Portfolio_1=rep(NA,obs), Portfolio_2=rep(NA,obs), Portfolio_3=rep(NA,obs))
#### find optimal allocations for different portfolios using different strategies ####
allocation <- array(NA, dim=c(3,obs,13))
strategies <- matrix(c(60,60,60,120,60,200),2)
for (i in 1:3){
retSamples <- strategies[1,i]  ## number of observations for sample estimator of daily returns
covSamples <- strategies[2,i]  ## number of observations for sample estimator of covariance
balanceDay <- 56 + covSamples   ## (re)balance days
while (balanceDay <= obs){
## solve the Markowitz problem
expecReturns <- colMeans(dailyReturns[(balanceDay-retSamples):(balanceDay-1), 1:13], na.rm=TRUE)
covariance <- cov(dailyReturns[(balanceDay-covSamples):(balanceDay-1), 1:13], use="complete.obs")
A <- cbind(1, expecReturns, diag(1,13), diag(-1,13))
target <- 0.15 / 250
b <- c(1, target, -2+rep(0,13), -2+rep(0,13))
d <- rep(0,13)
optimalWeights <- solve.QP(Dmat=covariance, dvec=d, Amat=A, bvec=b, meq=2)$solution
## record the solutions
allocation[i, balanceDay+0:min(4,obs-balanceDay), ] <- matrix(rep(optimalWeights, min(5,obs-balanceDay+1)), ncol=13, byrow=T)
## backtesting, calculate actual returns
dailyReturns[balanceDay+0:min(4,obs-balanceDay), 13+i] <- dailyReturns[balanceDay+0:min(4,obs-balanceDay), 1:13] %*% optimalWeights
balanceDay <- balanceDay + 5  ## weekly rebalance portfolios
}
}
## calculate cumulative returns for securities and portfolios
cumuReturns <- dailyReturns
for (j in 1:obs)
cumuReturns[j, ] <- apply(dailyReturns[1:j, ], 2, Return.cumulative) + 1
#### calculate indicators for the Risk and Performance Reporting ####
calcuIndicators <- function(x)
c(Daily_mean_returns = mean(x, na.rm=TRUE),
Daily_min_returns = min(x, na.rm=TRUE),
Daily_max_returns = max(x, na.rm=TRUE),
Volatility = sd(x, na.rm=TRUE),
Sharpe_ratio = SharpeRatio(x, Rf=0, FUN="StdDev"),
Sortino_ratio = SortinoRatio(x, MAR=target),
Skewness = skewness(x, method="sample"),
Kurtosis = kurtosis(x, method="sample"),
Modifed_VaR = VaR(x, method="modified"),
CVaR = CVaR(x),
Max_drawdown = maxDrawdown(x)
)
Report <- apply(dailyReturns[1:257,], 2, calcuIndicators)
#### calculate annualized daily indicators ####
calcuIndicators.annualized <- function(x)
c(Daily_mean_returns = mean(x, na.rm=TRUE) * 250,
Daily_min_returns = min(x, na.rm=TRUE) * 250,
Daily_max_returns = max(x, na.rm=TRUE) * 250,
Volatility = sd.annualized(x, scale=250),
Sharpe_ratio = SharpeRatio.annualized(x, Rf=0, scale=250, geometric=FALSE),
Sortino_ratio = SortinoRatio(x, MAR=target) * sqrt(250),
Skewness = skewness(x, method="sample") / sqrt(250),
Kurtosis = (kurtosis(x, method="sample") - 3) / 250 + 3,
Modifed_VaR = VaR(method="modified", weights=1, mu=mean(x, na.rm=TRUE)*250, sigma=var(x, na.rm=TRUE)*250, m3=skewness(x, method="sample")/sqrt(250), m4=(kurtosis(x, method="sample")-3)/250),
CVaR = CVaR(method="gaussian", weights=1, mu=mean(x, na.rm=TRUE)*250, sigma=var(x, na.rm=TRUE)*250),
Max_drawdown = maxDrawdown(x)
)
Report.annualized <- apply(dailyReturns, 2, calcuIndicators.annualized)
#### compare performances of the short term strategy in differenct periods of the crisis ####
Report.before <- apply(dailyReturns[1:258,], 2, calcuIndicators)
Report.during <- apply(dailyReturns[259:627,], 2, calcuIndicators)
Report.after<- apply(dailyReturns[628:1007,], 2, calcuIndicators)
Report.crisis <- cbind(Report.before[,"Portfolio_1"], Report.during[,"Portfolio_1"], Report.after[,"Portfolio_1"])
colnames(Report.crisis) <- c("Before Crisis","During Crisis","After Crisis")
#### output ####
workBook <- createWorkbook(type="xls")
sheet1 <- createSheet(workBook, sheetName="Performance & Risk Reporting")
sheet2 <- createSheet(workBook, sheetName="Portfolio in crisis periods")
sheet3 <- createSheet(workBook, sheetName="Cumulative PnL")
sheet4 <- createSheet(workBook, sheetName="Daily Returns")
sheet5 <- createSheet(workBook, sheetName="Portfolio Allocations")
sheet6 <- createSheet(workBook, sheetName="Raw Daily Prices")
addDataFrame(Report, sheet=sheet1, startRow=2)
addDataFrame(Report.annualized, sheet=sheet1, startRow=15)
addDataFrame(Report.crisis, sheet=sheet2, startRow=2)
addDataFrame(cumuReturns, sheet=sheet3)
addDataFrame(dailyReturns, sheet=sheet4)
for (k in 1:3){
temp <- as.matrix(allocation[k, , ])
rownames(temp) <- as.character(index(dailyReturns))
colnames(temp) <- colnames(dailyReturns)[1:13]
addDataFrame(na.omit(temp), sheet=sheet5, startRow=2, startColumn=15*(k-1)+1)
}
addDataFrame(rawPrices, sheet=sheet6)
png("cumulativePnL.png", width=1024, height=512)
autoplot(cumuReturns, main="Cumulative Profit and Loss", facets=NULL) + xlab("Period") + ylab("Cumulative Daily Returns") + theme(plot.title=element_text(size = rel(1.5)))
dev.off()
png("cumulativePnL(seperate).png", width=512, height=2048)
autoplot(cumuReturns, main="Cumulative PnL (seperate)", facets=Series~.) + xlab("Period") + ylab("Cumulative Daily Returns") + theme(plot.title=element_text(size = rel(1.5)))
dev.off()
png("dailyReturns.png", width=512, height=2048)
autoplot(dailyReturns, main="Daily Returns (seperate)", facets=Series~.) + xlab("Period") + ylab("Daily Returns") + theme(plot.title=element_text(size = rel(1.5)))
dev.off()
png("CumulativePnL(Portfolio_1).png", width=512, height=512)
autoplot(cumuReturns$Portfolio_1[1:1007], main="Portfolio_1 Cumulative PnL in Crisis Periods", facets=NULL) + xlab("Period") + ylab("Cumulative Daily Returns") + theme(plot.title=element_text(size=rel(1.5))) + geom_vline(xintercept=as.numeric(index(cumuReturns[c(250,627),])), linetype="dashed")
dev.off()
png("dailyReturns(Portfolio_1).png", width=512, height=512)
autoplot(dailyReturns$Portfolio_1[1:1007], main="Portfolio_1 Daily Returns in Crisis Periods", facets=NULL) + xlab("Period") + ylab("Daily Returns") + theme(plot.title=element_text(size=rel(1.5))) + geom_vline(xintercept=as.numeric(index(cumuReturns[c(250,627),])), linetype="dashed")
dev.off()
addPicture(file="CumulativePnL.png", sheet=sheet1, startRow=30, startColumn=2)
addPicture(file="CumulativePnL(seperate).png", sheet=sheet1, startRow=60, startColumn=2)
addPicture(file="dailyReturns.png", sheet=sheet1, startRow=60, startColumn=10)
addPicture(file="CumulativePnL(Portfolio_1).png", sheet=sheet2, startRow=15, startColumn=2)
addPicture(file="dailyReturns(Portfolio_1).png", sheet=sheet2, startRow=15, startColumn=10)
saveWorkbook(workBook, "myProject.xls")
setwd("E:/R class_part1/final project")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
library(slidify)
author("Shizhu")
# Chunk 1
require(googleVis)
M1 = gvisMotionChart(Fruits, idvar = "Fruit", timevar = "Year")
print(M1, tag = "chart")
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
